import os
import sqlparse
from bokeh.io import show
from bokeh.models import Plot, Range1d, Circle, MultiLine, HoverTool, StaticLayoutProvider
from bokeh.models.graphs import from_networkx
from bokeh.palettes import Spectral4
from bokeh.plotting import figure
import networkx as nx


def clean_and_format_sql(file_path):
    """
    Cleans and formats the SQL file to remove comments and unnecessary whitespaces.
    """
    if os.path.exists(file_path):
        with open(file_path, "r") as sql_file:
            sql = sql_file.read()

        # Clean and format SQL
        formatted_sql = sqlparse.format(
            sql,
            strip_comments=True,
            strip_whitespace=True,
            reindent=True,
            keyword_case="upper",
        )
        return formatted_sql
    else:
        raise FileNotFoundError(f"File not found: {file_path}")


def parse_sql(file_path):
    """
    Parses the cleaned SQL file to extract tables, join types, and conditions.
    """
    sql = clean_and_format_sql(file_path)
    lines = sql.splitlines()

    tables = []  # To store table names
    joins = []   # To store join types and conditions
    lineage_graph = {"QUERY": []}

    for line in lines:
        tokens = line.strip().split()
        if not tokens:
            continue

        # Extract tables from FROM clause
        if "FROM" in tokens:
            try:
                table_name = tokens[tokens.index("FROM") + 1].strip(",")
                tables.append(table_name)
                lineage_graph["QUERY"].append(table_name)
            except IndexError:
                pass

        # Extract tables, join types, and conditions from JOIN clause
        if "JOIN" in tokens:
            try:
                table_name = tokens[tokens.index("JOIN") + 1].strip(",")
                join_type = " ".join(tokens[:tokens.index("JOIN")]).strip() or "INNER"
                lineage_graph[table_name] = {"join_type": join_type}
                lineage_graph["QUERY"].append(table_name)
            except IndexError:
                pass

    return lineage_graph


def visualize_data_lineage_with_bokeh(lineage_graph):
    """
    Visualizes the data lineage using Bokeh.
    """
    # Create a directed graph
    G = nx.DiGraph()

    # Add nodes and edges to the graph
    for query, tables in lineage_graph.items():
        if isinstance(tables, list):
            for table in tables:
                G.add_edge(query, table)
        elif isinstance(tables, dict):
            G.add_edge(query, tables["join_type"])

    # Convert the graph to Bokeh from NetworkX
    plot = figure(
        title="SQL Data Lineage Visualization",
        x_range=(-2, 2),
        y_range=(-2, 2),
        width=800,
        height=600,
    )
    plot.add_tools(HoverTool(tooltips=[("Node", "@index")]))

    # Use NetworkX's spring layout for node positioning
    layout = nx.spring_layout(G)
    bokeh_graph = from_networkx(G, layout, scale=1, center=(0, 0))

    bokeh_graph.node_renderer.glyph = Circle(size=15, fill_color="skyblue", fill_alpha=0.8)
    bokeh_graph.edge_renderer.glyph = MultiLine(line_color="black", line_alpha=0.8, line_width=1)

    plot.renderers.append(bokeh_graph)
    show(plot)


# Example usage
if __name__ == "__main__":
    # Provide the path to your SQL file
    sql_file_path = "path_to_your_sql_file.sql"

    try:
        lineage_graph = parse_sql(sql_file_path)
        print("Lineage Graph:", lineage_graph)
        visualize_data_lineage_with_bokeh(lineage_graph)
    except Exception as e:
        print(f"Error: {e}")
