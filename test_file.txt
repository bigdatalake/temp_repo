import os
import sqlparse
import graphviz


def clean_sql(file_path):
    """
    Pre-process the SQL file to clean it.
    Removes comments, trims whitespace, and ensures all keywords are uppercase.
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File does not exist: {file_path}")

    with open(file_path, "r") as file:
        sql_code = file.read()

    cleaned_sql = sqlparse.format(
        sql_code,
        strip_comments=True,  # Remove comments
        keyword_case="upper",  # Convert keywords to uppercase
        strip_whitespace=True  # Remove unnecessary whitespace
    )
    return cleaned_sql


def parse_sql(file_path):
    """
    Extract table names and join conditions from a SQL file.
    """
    cleaned_sql = clean_sql(file_path)
    table_names = []
    join_conditions = []

    # Process cleaned SQL line by line
    for line in cleaned_sql.splitlines():
        tokens = line.strip().split()

        # Check for table names in FROM or JOIN clauses
        if len(tokens) > 1 and ('FROM' in tokens or 'JOIN' in tokens):
            try:
                if "FROM" in tokens:
                    table_index = tokens.index("FROM") + 1
                    if table_index < len(tokens):
                        table_name = tokens[table_index].strip(",").upper()
                        table_names.append(table_name)

                if "JOIN" in tokens:
                    table_index = tokens.index("JOIN") + 1
                    if table_index < len(tokens):
                        table_name = tokens[table_index].strip(",").upper()
                        table_names.append(table_name)

            except Exception as e:
                print(f"Error parsing table names: {e}")

        # Check for ON conditions in JOIN clauses
        if "ON" in tokens:
            try:
                condition_index = tokens.index("ON") + 1
                if condition_index < len(tokens):
                    condition = " ".join(tokens[condition_index:]).strip(",").upper()
                    join_conditions.append(condition)
            except Exception as e:
                print(f"Error parsing join condition: {e}")

    return {"tables": table_names, "join_conditions": join_conditions}


def visualize_lineage(lineage):
    """
    Create a visual representation of the SQL data lineage.
    """
    graph = graphviz.Digraph("SQL_Data_Lineage", format="png")

    # Add nodes for tables
    for table in lineage["tables"]:
        graph.node(table, shape="box", style="filled", color="lightblue")

    # Add edges for join conditions
    for condition in lineage["join_conditions"]:
        # Extract table names from condition for visualization
        tables_in_condition = [t.strip() for t in condition.split("=") if "." in t]
        if len(tables_in_condition) == 2:
            table1, table2 = tables_in_condition
            graph.edge(table1.split(".")[0], table2.split(".")[0], label=condition)

    # Render and save the graph
    graph.render("sql_data_lineage", cleanup=True)
    print("Visualization saved as 'sql_data_lineage.png'")


if __name__ == "__main__":
    # Example usage
    sql_file_path = "sample.sql"  # Replace with the path to your SQL file

    try:
        lineage = parse_sql(sql_file_path)
        print("Extracted Lineage:")
        print("Tables:", lineage["tables"])
        print("Join Conditions:", lineage["join_conditions"])

        # Visualize the lineage
        visualize_lineage(lineage)
    except FileNotFoundError as e:
        print(e)
