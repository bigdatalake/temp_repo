# Calculate count of successes and failures for each job_id
count_df = filtered_data.groupby(["job_id", "status"]).size().unstack(fill_value=0)

# Calculate success and failure counts
success_count = count_df.get("Success", 0)
failure_count = count_df.get("FAILED", 0)

# Calculate total counts per job_id
total_count = count_df.sum(axis=1)

# Calculate success and failure ratios as percentages
count_df["success_ratio"] = (success_count / total_count * 100).round(2)
count_df["failure_ratio"] = (failure_count / total_count * 100).round(2)

# Create success_ratio and failure_ratio columns with symbols and color
count_df["success_ratio_display"] = count_df["success_ratio"].apply(
    lambda x: f"{x}% ✅" if x > 50 else f"{x}% ❌"
)

count_df["failure_ratio_display"] = count_df["failure_ratio"].apply(
    lambda x: f"{x}% ❌" if x > 50 else f"{x}% ✅"
)

# Apply color coding: green for success and red for failure
def success_failure_color(val):
    if "✅" in val:
        return 'background-color: green; color: white;'
    elif "❌" in val:
        return 'background-color: red; color: white;'
    return ''

# Apply the style to the dataframe
styled_df = count_df.style.applymap(success_failure_color, subset=["success_ratio_display", "failure_ratio_display"])

# Display the dataframe
st.dataframe(styled_df, use_container_width=True)
